# Expose Prometheus endpoint
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always

# Enable all metrics
management.metrics.enable.all=true

# Enable JVM metrics
management.metrics.enable.jvm=true

# OpenTelemetry Configuration
# Service name - this is important for identifying your application in the telemetry data
spring.application.name=my-demo-app

# OpenTelemetry exporter endpoint - point to your collector
management.otlp.metrics.export.url=http://otel-collector:4318/v1/metrics
management.otlp.tracing.endpoint=http://otel-collector:4318/v1/traces

# Tracing configuration
management.tracing.sampling.probability=1.0
management.tracing.enabled=true

# Enable OpenTelemetry metrics export
management.metrics.export.otlp.enabled=true
management.metrics.export.otlp.step=10s

# Additional helpful configurations
# More frequent metrics publishing (reduced from 60s to 10s)
management.metrics.export.defaults.step=10s

# Enable web metrics collection (request timing, etc)
management.metrics.web.server.request.autotime.enabled=true

# More detailed HTTP metrics
management.metrics.web.server.request.metric-name=http.server.requests

# Ensure logs include trace IDs for correlation
# logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]