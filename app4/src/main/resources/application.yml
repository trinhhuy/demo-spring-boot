server:
  port: 8080

grpc:
  server:
    port: 9090

spring:
  application:
    name: grpc-server
  main:
    web-application-type: none
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
    show-sql: true
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#    transaction:
#      jta:
#        platform: org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    listener:
      ack-mode: manual
    consumer:
      group-id: my-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      topic:
        order-created: order-created
        payment-success: payment-success
        payment-failed: payment-failed
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_DEFAULT_ZONE}
  instance:
    hostname: ${EUREKA_SERVER_HOSTNAME}
    instance-id: ${spring.application.name}:${grpc.server.port}
    metadata-map:
      grpc.port: ${grpc.server.port}  # add metadata for gRPC port
      weight: 10

logging:
  level:
    io.grpc: ERROR
    io.netty: ERROR
    org.springframework.cloud.netflix.eureka: DEBUG
    org.apache.kafka: ERROR
